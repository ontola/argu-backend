<% environment.context_class.instance_eval { include Rails.application.routes.url_helpers } %>

Argu.ui = {
    bg: null,
    window: null,

    init: function () {
        "use strict";
        $(document)
            .on('keyup', '.confirm .confirm-text', this.confirmInputHandler)
            .on('click', '.comment .btn-reply', this.openCommentForm)
            .on('pjax:success', this.handleDOMChangedFinished);
        this.handleDOMChangedFinished();
        this.initPlaceholderFallback();

        (this.window = $(window)).resize(this.handleResizeBackground);
        this.handleResizeBackground();
    },

    confirmInputHandler: function () {
        "use strict";
        var _this = $(this);
        console.log(_this.attr('confirm-text'), _this.val());
        _this.closest('.confirm').find('.confirm-action').attr('disabled', _this.val() != _this.attr('confirm-text'));
    },

    handleDOMChangedFinished: function () {
        this.handleEditableSettings();
        Argu.ui.bg = $(".background");
    },

    handleEditableSettings: function () {
        "use strict";
        var settings;
        if ((settings = $('.portal-settings'))) {
            var editableOptions = {
                onsubmit: function (settings) {
                    settings.target = '<%= portal_settings_path %>/';
                },
                submitdata : function () {
                    return {key: this.getAttribute('id')};
                },
                indicator : 'Saving...',
                tooltip   : 'Click to edit...'
            };

            settings.find('.setting .value').editable('', editableOptions);

            settings.find('.add-setting').click(function () {
                var key = window.prompt('Enter the key', '');
                if (key !== null && key.length > 0) {
                    var newSetting = $('<tr class="setting"><td class="key">'+key+'</td><td class="value" id="'+key+'" title="Click to edit..."></td></tr>');
                    $('.settings-table tbody').append(newSetting);
                    newSetting.find('.value').editable('', editableOptions);
                }
            });
        }
    },

    handleResizeBackground: function () {
        "use strict";
        Argu.ui.bg.height(Argu.ui.window.height() + 0);
    },

    initPlaceholderFallback: function () {
        "use strict";
        if ( !("placeholder" in document.createElement("input")) ) {
            $("input[placeholder], textarea[placeholder]").each(function() {
                var val = $(this).attr("placeholder");
                if ( this.value == "" ) {
                    this.value = val;
                }
                $(this).focus(function() {
                    if ( this.value == val ) {
                        this.value = "";
                    }
                }).blur(function() {
                    if ( $.trim(this.value) == "" ) {
                        this.value = val;
                    }
                })
            });

            // Clear default placeholder values on form submit
            $('form').submit(function() {
                $(this).find("input[placeholder], textarea[placeholder]").each(function() {
                    if ( this.value == $(this).attr("placeholder") ) {
                        this.value = "";
                    }
                });
            });
        }
    },

    openCommentForm: function (e) {
        "use strict";
        e.preventDefault();
        $('.comment_form#cf' + $(this).attr('id')).slideToggle();
    }
};
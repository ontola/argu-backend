/*global React, $*/

window.ProfileOption = React.createClass({
    propTypes: {
        addLabelText: React.PropTypes.string,
        className: React.PropTypes.string,
        mouseDown: React.PropTypes.func,
        mouseEnter: React.PropTypes.func,
        mouseLeave: React.PropTypes.func,
        option: React.PropTypes.object.isRequired,
        renderFunc: React.PropTypes.func
    },

    render () {
        const obj = this.props.option;
        return (
                <div className={this.props.className}
                     onMouseEnter={this.props.mouseEnter}
                     onMouseLeave={this.props.mouseLeave}
                     onMouseDown={this.props.mouseDown}
                     onClick={this.props.mouseDown}>
                    <img class="Select-item-result-icon" height='25em' src={obj.avatar_url} />
                    {obj.label}
                </div>
        );
    }
});

if (typeof module !== 'undefined' && module.exports) {
    module.exports = ProfileOption;
}

window.SingleValue = React.createClass({
    propTypes: {
        placeholder: React.PropTypes.string,
        value: React.PropTypes.object
    },
    render () {
        var obj = this.props.value;

        const item = obj ? (
            <div>
                <img class="Select-item-result-icon" height='25em' src={obj.avatar_url} />
                {obj.name}
            </div>
        ) : (this.props.placeholder);

        return (
            <div className="Select-placeholder">
                {item}
            </div>);
    }
});
if (typeof module !== 'undefined' && module.exports) {
    module.exports = SingleValue;
}

window.NewMembership = React.createClass({
    getInitialState () {
        return {
            display_name: this.props.display_name,
            image: this.props.image
        };
    },

    loadOptions (input, callback) {
        input = input.toLowerCase();
        if (!input.length) {
            return callback({
                options: [],
                complete: true
            });
        }

        fetch('/profiles.json', _safeCredentials({
            method: 'POST',
            body: JSON.stringify({
                q: input,
                thing: this.props.thing,
                things: this.props.things
            })
        })).then(statusSuccess)
                .then(json)
                .then((data) => {
                    callback(null, {
                        options: data.profiles.map((profile) => {
                            return {
                                value: profile.shortname,
                                id: profile.id.toString(),
                                label: profile.name,
                                avatar_url: profile.profile_photo.avatar.url
                            };
                        }),
                        complete: false
                    });
                }).catch((e) => {
                    Argu.Alert('Server error occured, please try again later', 'alert', true);
                    callback();
                });
    },

    render () {

        return (<Select
                  name="profile_id"
                  placeholder="Select user"
                  matchProp="any"
                  ignoreCase="true"
                  optionComponent={ProfileOption}
                  singleValueComponent={SingleValue}
                  asyncOptions={this.loadOptions}  />);
    }
});

if (typeof module !== 'undefined' && module.exports) {
    module.exports = NewMembership;
}

var HyperDropdown = React.createClass({
    getInitialState: function () {
        return {
            openState: false
        };
    },

    handleMouseUp: function (e) {
        window.clearTimeout(this.state.timeout);
        this.setState({openState: !this.state.openState});
    },

    handleBlur: function (e) {
        this.setState({openState: false});
    },

    render: function () {
        function _image(props) {
            if (props.image) {
                return <img src={props.image.url} alt={props.image.title} className={props.image.className} />;
            } else if (props.fa) {
                return <span className={['fa', props.fa].join(' ')} />;
            }
        }

        var collapseStyle = {
            display: this.state.openState ? 'block' : 'none'
        };

        var sections;
        if (this.props.sections) {
            sections = (<ul className="dropdown-content" style={collapseStyle}>
                {this.props.sections.map(function(section) {
                    var title;
                    if (section.title && section.items.length > 0) {
                        title = <span className="dropdown-header">{section.title}</span>
                    }
                    return (<div>
                        {title}
                        {section.items.map(function(item) {
                            if (item.type == 'link') {
                                return (<LinkItem key={item.title} {...item} />);
                            }
                        })}
                    </div>);
                })}
            </ul>);
        }
        var image_after = _image({fa: this.props.fa_after});

        return (<li tabIndex="0" onMouseUp={this.handleMouseUp} onBlurCapture={this.handleBlur} className="dropdown" data-intro="" data-position="">
            <div className="dropdown-trigger navbar-item">
                {_image(this.props)}
                <span className="icon-left">{this.props.title}</span>
                {image_after}
            </div>
            {sections}
        </li>);
    }
});

var IntroStart = React.createClass({
    getInitialState: function () {
        return {};
    },

    render: function () {
        return (
            <li tabIndex="0" className="dropdown">
                <a className="intro-trigger navbar-item">
                    <span className="fa fa-question" />
                    <span className="icon-left"><%= I18n.t('intro.start') %></span>
                </a>
            </li>
        );
    }
});

var LinkItem = React.createClass({
    getInitialState: function () {
        return {};
    },

    handleMouseDown: function (e) {
        // Fixes an issue where firefox bubbles events instead of capturing them
        // See: https://github.com/facebook/react/issues/2011
        this.getDOMNode().getElementsByTagName('a')[0].click();
    },

    render: function () {
        function _image(props) {
            if (props.image) {
                return <img src={props.image.url} alt={props.image.title} className={props.image.className} />;
            } else if (props.fa) {
                return <span className={['fa', props.fa].join(' ')} />;
            }
        }

        var divider;
        if (this.props.divider && this.props.divider == 'top') {
            divider = <div className="dropdown-divider"></div>;
        }

        return (<li className={this.props.type}>
            {divider}
            <a href={this.props.url} onMouseDownCapture={this.handleMouseDown} >
                {_image(this.props)}
                <span className="icon-left">{this.props.title}</span>
            </a>
        </li>);
    }
});
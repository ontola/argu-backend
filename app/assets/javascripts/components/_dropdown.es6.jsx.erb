/*global React, $*/

window.HyperDropdown = React.createClass({
    mixins: [
        (typeof(OnClickOutside) !== "undefined" ? OnClickOutside : undefined)
    ],

    getInitialState: function () {
        this.listeningToClick = true;
        return {
            openState: false,
            renderLeft: false,
            dropdownElement: {},
            current_actor: this.props.current_actor
        };
    },

    calculateRenderLeft: function () {
        this.referenceDropdownElement().style.left = '0';
        this.referenceDropdownElement().style.right = 'auto';
        var elemRect = this.referenceDropdownElement().getBoundingClientRect();
        var shouldRenderLeft = (elemRect.width + elemRect.left) > window.innerWidth;
        this.setState({renderLeft: shouldRenderLeft});
    },

    close: function () {
        var elem = this.state.dropdownElement;
        // Removes slow descending visibility repaint
        this.timerItem = window.setTimeout(function () {
            elem.style.display = 'block';
        }, 50);
        this.setState({openState: false});
    },

    componentDidMount: function () {
        this.unsubscribe = actorStore.listen(this.onActorChange);
        this.setState({referenceDropdownElement: this.getDOMNode().getElementsByClassName('dropdown-content')[0],
            dropdownElement: this.getDOMNode().getElementsByClassName('dropdown-content')[1]});
        window.addEventListener('resize', this.handleResize);
        this.calculateRenderLeft();
    },

    componentWillUnmount: function () {
        this.unsubscribe();
        window.clearTimeout(this.timerItem);
        window.removeEventListener('resize', this.handleResize);
    },

    handleClick: function () {
        if (this.listeningToClick) {
            if (this.state.openState) {
                this.close();
            } else {
                this.open();
            }
        }
    },

    handleClickOutside: function () {
        if (this.state.openState) {
            this.close();
        }
    },

    mouseEnterTimeoutCallback: function () {
        this.listeningToClick = true;
    },

    onMouseEnter: function () {
        if (!('ontouchstart' in window)) {
            this.listeningToClick = false;
            // Start timer to prevent a quick close after clicking on the trigger
            this.mouseEnterTimeout = window.setTimeout(this.mouseEnterTimeoutCallback, 1000);
            this.open();
        };
    },

    onMouseLeave: function () {
        if (this.state.openState) {
            this.close();
            // Remove / reset timer
            window.clearTimeout(this.mouseEnterTimeout);
        }
    },

    handleResize: function () {
        this.calculateRenderLeft();
    },

    open: function () {
        window.clearTimeout(this.timerItem);
        this.setState({openState: true});
    },

    onActorChange: function (data) {
        this.setState({current_actor: data});
    },

    // Used to calculate the width of a dropdown content menu
    referenceDropdownElement: function () {
        let refDropdown;
        if (typeof(this.state.referenceDropdownElement) !== "undefined") {
            refDropdown = this.state.referenceDropdownElement;
        } else {
            refDropdown = this.getDOMNode().getElementsByClassName('dropdown-content')[0];
        }
        return refDropdown;
    },

    render: function () {
        var ReactCSSTransitionGroup = React.addons.CSSTransitionGroup;
        var collapseClass = this.state.renderLeft ? 'dropdown--left ' : 'dropdown-right ';

        var sections,
            _this = this;
        if (this.props.sections && this.state.openState) {
            sections = (<ul className={'dropdown-content ' + collapseClass + this.props.contentClassName } style={null}>
                {this.props.sections.map(function (section, i) {
                    if (typeof(section.type) == "string") {
                        return (<Notifications key={i} done={_this.close} {...section} />);
                    } else {
                        var title;
                        if (section.title && section.items.length > 0) {
                            title = <span className="dropdown-header">{section.title}</span>
                        }

                        var items = section.items.map(function(item) {
                            if (item.type == 'link') {
                                return <LinkItem key={item.title} done={_this.close} current_actor={_this.state.current_actor} {...item} />;
                            } else if (item.type == 'actor') {
                                return <ActorItem key={item.title} done={_this.close} {...item} />;
                            } else if (item.type == 'fb_share') {
                                return <FBShareItem key={item.title} done={_this.close} {...item} />;
                            }
                        });

                        return (
                            <div key={i}>
                                {title}
                                {items}
                            </div>);
                    }
                })}
            </ul>);
        }
        var dropdownClass = "dropdown" + (this.state.openState ? ' dropdown-active' :'');

        var trigger;
        if (this.props.trigger) {
            if (this.props.trigger.type == 'current_user') {
                trigger = <CurrentUserTrigger handleClick={this.handleClick} handleTap={this.handleTap} {...this.props.trigger} />
            } else if (this.props.trigger.type == 'notifications') {
                trigger = <NotificationTrigger handleClick={this.handleClick} handleTap={this.handleTap} {...this.props} />
            }
        } else {
            var image_after  = _image({fa: this.props.fa_after});
            var triggerClass = "dropdown-trigger " + this.props.triggerClass;
            var TriggerContainer = this.props.triggerTag || 'div';
            trigger = (<TriggerContainer className={triggerClass} onClick={this.handleClick} onTouchEnd={this.handleTap} done={this.close}>
                          {_image(this.props)}
                          <span className={(this.props.image || this.props.fa) ? 'icon-left' : ''}>{this.props.title}</span>
                          {image_after}
                       </TriggerContainer>);
        }

        return (<li tabIndex="1"  className={dropdownClass} onMouseEnter={this.onMouseEnter} onMouseLeave={this.onMouseLeave} >
            {trigger}
            <ul className={'dropdown-content ' + this.props.contentClassName}></ul><%# This makes sure renderLeft is calculated correctly %>
            <ReactCSSTransitionGroup transitionName="dropdown" transitionAppear={true} component="div">
                {sections}
            </ReactCSSTransitionGroup>
        </li>);
    }
});

var LinkItem = React.createClass({
    getInitialState: function () {
        return {};
    },

    handleMouseDown: function () {
        // Fixes an issue where firefox bubbles events instead of capturing them
        // See: https://github.com/facebook/react/issues/2011
        let dataMethod = this.getDOMNode().getAttribute('data-method');
        if (dataMethod !== "post" && dataMethod !== "put" && dataMethod !== "patch" && dataMethod !== "delete") {
            this.getDOMNode().getElementsByTagName('a')[0].click();
            this.props.done();
        }
    },

    render: function () {
        var divider;
        if (this.props.divider && this.props.divider == 'top') {
            divider = <div className="dropdown-divider"></div>;
        }
        var method, confirm, remote, skipPjax, sortValue, className;
        if (this.props.data) {
            method = this.props.data.method;
            confirm = this.props.data.confirm;
            remote = this.props.data.remote;
            skipPjax = this.props.data['skip-pjax'];
            sortValue = this.props.data['sort-value'];
        }
        className = this.props.className;

        return (<li className={this.props.type}>
            {divider}
            <a href={this.props.url} data-remote={remote} data-method={method} data-confirm={confirm} onMouseDownCapture={this.handleMouseDown} data-skip-pjax={skipPjax} data-sort-value={sortValue} className={className}>
                {_image(this.props)}
                <span className={(this.props.image || this.props.fa) ? 'icon-left' : ''}>{this.props.title}</span>
            </a>
        </li>);
    }
});

var FBShareItem = React.createClass({

    handleClick: function (e) {
        if (typeof(FB) !== "undefined") {
            e.preventDefault();
            FB.ui({
                method: 'share',
                href: this.props.data.share_url,
                caption: this.props.title
            }, (response) => {
                console.log(response);
                this.props.done();
            });
        }
    },

    render: function () {
        return (<li className={this.props.type}>
            <a href={this.props.url} data-skip-pjax="true" onClick={this.handleClick}>
                {_image({fa: 'fa-facebook'})}
                <span className="icon-left">{this.props.title}</span>
            </a>
        </li>);
    }
});

var ActorItem = React.createClass({
    getInitialState: function () {
        return {};
    },

    handleClick: function (e) {
        e.preventDefault();
    },

    handleMouseDown: function (e) {
        e.preventDefault();
        this.props.done();
        fetch(this.props.url, _safeCredentials({
            method: 'PUT'
        })).then(statusSuccess)
           .then(json)
           .then(function (data) {
               Actions.actorUpdate(data);
               if (window.confirm('<%= I18n.t('profiles.switch_warning') %>')) {
                   location.reload();
               }
        }).catch(console.log);
    },

    render: function () {
        var divider;
        if (this.props.divider && this.props.divider == 'top') {
            divider = <div className="dropdown-divider"></div>;
        }
        var method, remote, skipPjax;
        if (this.props.data) {
            skipPjax = this.props.data['skip-pjax'];
        }

        return (<li className={'link ' + this.props.type}>
            {divider}
            <a href='#' onMouseDownCapture={this.handleMouseDown} rel="nofollow" onClickCapture={this.handleClick} data-skip-pjax={skipPjax}>
                {_image(this.props)}
                <span className={(this.props.image || this.props.fa) ? 'icon-left' : ''}>{this.props.title}</span>
            </a>
        </li>);
    }
});

var CurrentUserTrigger = React.createClass({
    getInitialState: function () {
        return {
            display_name: this.props.title,
            profile_photo: this.props.profile_photo
        };
    },

    onActorChange: function (data) {
        this.setState(data);
    },

    componentDidMount: function () {
        this.unsubscribe = actorStore.listen(this.onActorChange);
    },

    componentWillUnmount: function () {
        this.unsubscribe();
    },

    render: function () {
        var triggerClass = "dropdown-trigger " + this.props.triggerClass;
        var TriggerContainer = this.props.triggerTag || 'div';

        return (<TriggerContainer className={triggerClass} onClick={this.props.handleClick} onTouchEnd={this.props.handleTap} >
            {_image({image: {url: this.state.profile_photo.url, title: this.state.profile_photo.title, className: 'profile-picture--navbar'}})}
            <span className="icon-left">{this.state.display_name}</span>
        </TriggerContainer>);
    }
});

if (typeof module !== 'undefined' && module.exports) {
    module.exports = HyperDropdown;
}

/*global React, $*/

var _image = function (props) {
    if (props.image) {
        return <img src={props.image.url} alt={props.image.title} className={props.image.className} />;
    } else if (props.fa) {
        return <span className={['fa', props.fa].join(' ')} />;
    }
};

window.HyperDropdown = React.createClass({
    getInitialState: function () {
        return {
            openState: false,
            renderLeft: false
        };
    },

    calculateRenderLeft: function () {
        this.state.referenceDropdownElement.style.left = '0';
        this.state.referenceDropdownElement.style.right = 'auto';
        var elemRect = this.state.referenceDropdownElement.getBoundingClientRect();
        this.setState({renderLeft: (elemRect.width + elemRect.left) > window.innerWidth});
    },

    close: function () {
        var elem = this.state.dropdownElement;
        elem.style.display = 'none';
        this.timerItem = window.setTimeout(function () {
            elem.style.display = 'block';
        }, 50);
        this.setState({openState: false});
    },

    componentDidMount: function () {
        this.setState({referenceDropdownElement: this.getDOMNode().getElementsByClassName('dropdown-content')[0],
            dropdownElement: this.getDOMNode().getElementsByClassName('dropdown-content')[1]});
        this.calculateRenderLeft();
        window.addEventListener('resize', this.handleResize);
    },

    componentWillUnmount: function () {
        window.clearTimeout(this.timerItem);
        window.removeEventListener('resize', this.handleResize);
    },

    handleMouseUp: function (e) {
        if (this.state.openState) {
            this.close();
        } else {
            this.open();
        }
    },

    handleTap: function (e) {
        this.getDOMNode().focus();
        this.handleMouseUp();
    },

    handleBlur: function (e) {
        this.close()
    },

    handleResize: function () {
        this.calculateRenderLeft();
    },

    open: function () {
        window.clearTimeout(this.timerItem);
        this.setState({openState: true});
    },

    render: function () {
        var collapseStyle = {
            visibility: this.state.openState ? 'visible' : 'hidden',
            left: this.state.renderLeft ? 'auto' : 0,
            right: this.state.renderLeft ? 0 : undefined
        };

        var sections;
        if (this.props.sections) {
            sections = (<ul className="dropdown-content" style={collapseStyle}>
                {this.props.sections.map(function(section) {
                    var title;
                    if (section.title && section.items.length > 0) {
                        title = <span className="dropdown-header">{section.title}</span>
                    }
                    return (<div>
                        {title}
                        {section.items.map(function(item) {
                            if (item.type == 'link') {
                                return (<LinkItem key={item.title} {...item} />);
                            }
                        })}
                    </div>);
                })}
            </ul>);
        }
        var image_after  = _image({fa: this.props.fa_after});
        var triggerClass = "dropdown-trigger " + this.props.triggerClass;

        var TriggerContainer = this.props.triggerTag || 'div';

        return (<li tabIndex="1" onMouseUp={this.handleMouseUp} onTouchEnd={this.handleTap} onBlurCapture={this.handleBlur} className="dropdown" data-intro="" data-position="">
            <TriggerContainer className={triggerClass}>
                {_image(this.props)}
                <span className={(this.props.image || this.props.fa) ? 'icon-left' : ''}>{this.props.title}</span>
                {image_after}
            </TriggerContainer>
            <ul className="dropdown-content"></ul><%# This makes sure renderLeft is calculated correctly %>
            {sections}
        </li>);
    }
});

var LinkItem = React.createClass({
    getInitialState: function () {
        return {};
    },

    handleMouseDown: function (e) {
        // Fixes an issue where firefox bubbles events instead of capturing them
        // See: https://github.com/facebook/react/issues/2011
        this.getDOMNode().getElementsByTagName('a')[0].click();
    },

    render: function () {
        var divider;
        if (this.props.divider && this.props.divider == 'top') {
            divider = <div className="dropdown-divider"></div>;
        }

        return (<li className={this.props.type}>
            {divider}
            <a href={this.props.url} onMouseDownCapture={this.handleMouseDown} >
                {_image(this.props)}
                <span className={(this.props.image || this.props.fa) ? 'icon-left' : ''}>{this.props.title}</span>
            </a>
        </li>);
    }
});

if (typeof module !== 'undefined' && module.exports) {
    module.exports = HyperDropdown;
}
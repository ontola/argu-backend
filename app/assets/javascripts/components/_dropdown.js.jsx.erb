/*global React, $*/

window.HyperDropdown = React.createClass({

    getInitialState: function () {
        return {
            openState: false,
            renderLeft: false,
            dropdownElement: {}
        };
    },

    calculateRenderLeft: function () {
        this.state.referenceDropdownElement.style.left = '0';
        this.state.referenceDropdownElement.style.right = 'auto';
        var elemRect = this.state.referenceDropdownElement.getBoundingClientRect();
        this.setState({renderLeft: (elemRect.width + elemRect.left) > window.innerWidth});
    },

    close: function () {
        var elem = this.state.dropdownElement;
        elem.style.display = 'none';
        this.timerItem = window.setTimeout(function () {
            elem.style.display = 'block';
        }, 50);
        this.setState({openState: false});
    },

    componentDidMount: function () {
        this.setState({referenceDropdownElement: this.getDOMNode().getElementsByClassName('dropdown-content')[0],
            dropdownElement: this.getDOMNode().getElementsByClassName('dropdown-content')[1]});
        this.calculateRenderLeft();
        window.addEventListener('resize', this.handleResize);
    },

    componentWillUnmount: function () {
        window.clearTimeout(this.timerItem);
        window.removeEventListener('resize', this.handleResize);
    },

    handleMouseUp: function (e) {
        if (this.state.openState) {
            this.close();
        } else {
            this.open();
        }
    },

    handleTap: function (e) {
        if (this.state.openState) {
            this.getDOMNode().blur();
        } else {
            this.getDOMNode().focus();
        }
        this.handleMouseUp();
    },

    handleBlur: function (e) {
        this.close()
    },

    handleResize: function () {
        this.calculateRenderLeft();
    },

    open: function () {
        window.clearTimeout(this.timerItem);
        this.setState({openState: true});
    },

    render: function () {
        var collapseStyle = {
            visibility: this.state.openState ? 'visible' : 'hidden',
            left: this.state.renderLeft ? 'auto' : 0,
            right: this.state.renderLeft ? 0 : undefined
        };

        var sections;
        if (this.props.sections) {
            sections = (<ul className={'dropdown-content ' + this.props.contentClassName} style={collapseStyle}>
                {this.props.sections.map(function(section) {
                    if (typeof(section.type) == "string") {
                        return (<Notifications {...section} />);
                    } else {
                        var title;
                        if (section.title && section.items.length > 0) {
                            title = <span className="dropdown-header">{section.title}</span>
                        }

                        var items = section.items.map(function(item) {
                            var ItemTag;
                            if (item.type == 'link') {
                                return <LinkItem key={item.title} {...item} />;
                            } else if (item.type == 'actor') {
                                ItemTag = 'ActorItem';
                                return <ActorItem key={item.title} {...item} />;
                            }
                        });

                        return (<div>
                            {title}
                            {items}
                        </div>);
                    }
                })}
            </ul>);
        }
        var dropdownClass = "dropdown" + (this.state.openState ? ' dropdown-active' :'');

        var trigger;
        if (this.props.trigger) {
            if (this.props.trigger.type == 'current_user') {
                trigger = <CurrentUserTrigger {...this.props.trigger}/>
            } else if (this.props.trigger.type == 'notifications') {
                trigger = <NotificationTrigger {...this.props}/>
            }
        } else {
            var image_after  = _image({fa: this.props.fa_after});
            var triggerClass = "dropdown-trigger " + this.props.triggerClass;
            var TriggerContainer = this.props.triggerTag || 'div';
            trigger = (<TriggerContainer className={triggerClass}>
                          {_image(this.props)}
                          <span className={(this.props.image || this.props.fa) ? 'icon-left' : ''}>{this.props.title}</span>
                          {image_after}
                       </TriggerContainer>);
        }

        return (<li tabIndex="1" onMouseUp={this.handleMouseUp} onTouchEnd={this.handleTap} onBlurCapture={this.handleBlur} className={dropdownClass}>
            {trigger}
            <ul className={'dropdown-content ' + this.props.contentClassName}></ul><%# This makes sure renderLeft is calculated correctly %>
            {sections}
        </li>);
    }
});

var LinkItem = React.createClass({
    getInitialState: function () {
        return {};
    },

    handleMouseDown: function (e) {
        // Fixes an issue where firefox bubbles events instead of capturing them
        // See: https://github.com/facebook/react/issues/2011
        this.getDOMNode().getElementsByTagName('a')[0].click();
    },

    render: function () {
        var divider;
        if (this.props.divider && this.props.divider == 'top') {
            divider = <div className="dropdown-divider"></div>;
        }
        var method, remote, skipPjax, className;
        if (this.props.data) {
            method = this.props.data.method;
            remote = this.props.data.remote;
            skipPjax = this.props.data['skip-pjax'];
        }
        className = this.props.className;

        return (<li className={this.props.type}>
            {divider}
            <a href={this.props.url} data-remote={remote} data-method={method} onMouseDownCapture={this.handleMouseDown} data-skip-pjax={skipPjax} className={className}>
                {_image(this.props)}
                <span className={(this.props.image || this.props.fa) ? 'icon-left' : ''}>{this.props.title}</span>
            </a>
        </li>);
    }
});

var ActorItem = React.createClass({
    getInitialState: function () {
        return {};
    },

    handleClick: function (e) {
        e.preventDefault();
    },

    handleMouseDown: function (e) {
        e.preventDefault();
        $.ajax({
            type: 'PUT',
            url: this.props.url,
            dataType: 'json',
            async: true,
            success: function (data) {
                Actions.actorUpdate(data);
            },
            error: function () {
                console.log('failed');
            }
        });
    },

    render: function () {
        var divider;
        if (this.props.divider && this.props.divider == 'top') {
            divider = <div className="dropdown-divider"></div>;
        }
        var method, remote, skipPjax;
        if (this.props.data) {
            method = this.props.data.method;
            remote = this.props.data.remote;
            skipPjax = this.props.data['skip-pjax'];
        }

        return (<li className={'link ' + this.props.type}>
            {divider}
            <a href='#' onMouseDownCapture={this.handleMouseDown} onClick={this.handleClick} data-skip-pjax={skipPjax}>
                {_image(this.props)}
                <span className={(this.props.image || this.props.fa) ? 'icon-left' : ''}>{this.props.title}</span>
            </a>
        </li>);
    }
});

var CurrentUserTrigger = React.createClass({
    getInitialState: function () {
        return {
            display_name: this.props.title,
            image: this.props.image
        };
    },

    onActorChange: function (data) {
        this.setState(data);
    },

    componentDidMount: function () {
        this.unsubscribe = actorStore.listen(this.onActorChange);
    },

    componentWillUnmount: function () {
        this.unsubscribe();
    },

    render: function () {
        var triggerClass = "dropdown-trigger " + this.props.triggerClass;
        var TriggerContainer = this.props.triggerTag || 'div';

        return (<TriggerContainer className={triggerClass}>
            {_image({image: {url: this.state.image.url, title: this.state.image.title, className: 'profile-picture--navbar'}})}
            <span className="icon-left">{this.state.display_name}</span>
        </TriggerContainer>);
    }
});

if (typeof module !== 'undefined' && module.exports) {
    module.exports = HyperDropdown;
}
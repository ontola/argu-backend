=set_title motion.new_record? ? t('new_type', type: motion_type) : t('edit_type', type: motion_type)
.col-3
  .col-3-2
    =to_parent
    .box
      section.section-info
        .details
          .details-part.details-part--type.motion-bg[data-title=t('motions.tooltips.info')]
            span[class="fa fa-#{motion_icon}"]
            span.icon-left= motion_type
      =semantic_form_for((motion.new_record? ? [get_parent_resource, motion] : motion), html: {autocomplete: 'off'}) do |f|
        section.smallpadded.form-filled
          =f.inputs
            h3= t('motions.form.title_heading')
            p= t('motions.form.title_body_html')
            =f.input :title, as: :text, input_html: {size: '2', maxlength: '110', class: 'motion-t form-input-title', autofocus: :autofocus}, label: false, hint: false, placeholder: placeholder_for(motion, :title, motion_type.downcase)
            h3= t('motions.form.content_heading')
            p= t('motions.form.content_body_html')
            =f.input :content, input_html: {class: 'form-input-content', rows: '8'}, label: false, hint: false, placeholder: placeholder_for(motion, :content, motion_type.downcase)
            /=f.input :tag_list, input_html: {class: 'tag-list'}, label: true
          =render partial: 'photos/form',
                  locals: {form: f,
                          type: :cover_photo,
                          relation: :default_cover_photo,
                          preview_style: 'max-height: 256px;'}
          - if policy(motion).permitted_attributes.include?(:pinned)
            =f.input :pinned, as: :reverse_boolean
            li.form-helper
              span= t('edges.form.helper.pinned')
          -if !motion.new_record? && policy(motion).trash?
            =f.inputs name: t('forms.danger_zone'), class: 'danger-zone' do
              - if policy(motion).trash?
                =f.semantic_fields_for :edge do |ef|
                  =ef.input :is_trashed, as: :reverse_boolean
              - if policy(motion).move?
                =f.input :f_move, as: :link, url: motion_move_url(motion), input_html: {data: {remote: true}, class: 'btn--warning'}
                =f.input :f_convert, as: :link, url: new_edge_conversion_url(motion.edge), input_html: {data: {remote: true}, class: 'btn--warning'}
                =f.input :invert_arguments, as: :reverse_boolean
                /TODO invert arguments only visible when in edit, not in new.
        section.section--footer
          - if motion.new_record?
            =render partial: 'profiles/profile_current'
          - else
            =render partial: motion.creator, locals: {resource: motion}

          =f.actions
            .sticky-submit
              =f.action :submit, as: :button
  .col-3-1
    =render partial: 'markdown_helper'

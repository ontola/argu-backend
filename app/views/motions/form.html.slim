=set_title motion.new_record? ? t('new_type', type: motion_type) : t('edit_type', type: motion_type)
.col-3
  .col-3-2
    =to_parent
    .box
      =semantic_form_for(motion, url: (motion.new_record? ? collection_iri_path(parent_resource, :motions) : motion.iri_path), html: {autocomplete: 'off', multipart: true}, remote: true, authenticity_token: true) do |f|
        =f.input :default_cover_photo, as: :react_cover, label: false
        section.section-info
          .details
            .details-part.details-part--type.motion-bg[data-title=t('motions.tooltips.info')]
              span[class="fa fa-#{motion_icon}"]
              span.icon-left= motion_type
        section.smallpadded.form-filled
          =f.inputs
            h3= t('motions.form.title_heading')
            p= t('motions.form.title_body_html')
            =f.input :title, as: :text, input_html: {size: '2', maxlength: '110', class: 'motion-t form-input-title', autofocus: :autofocus}, label: false, hint: false, placeholder: placeholder_for(motion, :title, motion_type.downcase)
            h3= t('motions.form.content_heading')
            p= t('motions.form.content_body_html')
            =f.input :content, input_html: {class: 'form-input-content', rows: '8'}, label: false, hint: false, placeholder: placeholder_for(motion, :content, motion_type.downcase)
            =react_component_store 'MapPicker', props: map_picker_props(motion)
          - if policy(resource).permitted_attributes.include?(:mark_as_important)
            =f.input :mark_as_important, as: :reverse_boolean
            li.form-helper
              span= t('publications.follow_type.helper', news_audience: resource.potential_audience(:news), reactions_audience: resource.potential_audience(:reactions))
          =f.semantic_fields_for :attachments do |attachment|
            =render 'attachment_fields', f: attachment
          .links
            =link_to_add_association f, :attachments, class: 'btn-subtle' do
              span.fa.fa-plus
              span.icon-left= t('attachments.add')
          - if policy(motion).permitted_attributes.include?(:pinned) || policy(motion).permitted_attributes.include?(:expires_at) || (motion.persisted? && policy(motion).move?)
            =f.inputs name: t('forms.advanced')
              - if policy(motion).permitted_attributes.include?(:pinned)
                =f.input :pinned, as: :reverse_boolean
                li.form-helper
                  span= t('edges.form.helper.pinned')
              - if policy(motion).permitted_attributes.include?(:expires_at)
                =f.input :expires_at, as: :datetime_picker
              - if motion.persisted? && policy(motion).convert?
                =f.input :invert_arguments, as: :reverse_boolean
                =f.input :f_convert, as: :link, url: new_edge_conversion_url(motion.edge.uuid), input_html: {data: {remote: true}, class: 'btn--warning'}
        section.section--footer.footer-flex
          .footer-flex-element.footer-creator
            =render partial: 'profiles/creator', locals: {resource: motion}
          .footer-flex-element.footer-publication
            =render partial: 'publications/form', locals: {f: f, resource: motion}
          .footer-action
            =f.action :submit, as: :button
  .col-3-1
    =render partial: 'markdown_helper'

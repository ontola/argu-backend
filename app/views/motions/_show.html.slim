.box.box--extra-margin.motion[class=status_classes_for(model)]
  - if model.default_cover_photo.present?
    =link_to motion_path(model), 'aria-hidden': true, tabindex: '-1'
      =render partial: 'application/box_image', locals: {media_object: model.default_cover_photo}
  section[itemscope="itemscope" itemtype="http://www.schema.org/Answer"]
    =link_to motion_path(model)
      h3.motion-t[itemprop="headline"]= model.title
  =render partial: 'motions/info_bar', locals: {show_type: false, motion: model, show_decision: true, show_vote_pie: true, show_profile: true}
  section
    =render partial: 'application/markdown_collapsible', locals: {content: model.content, identifier: model.identifier, character_length: 350}
  section.section--attachments
    =react_component_store 'Gallery', props: gallery_props(model)
  section
    - if model.edge.arguments_pro.present? || model.edge.arguments_con.present?
      ul.box-list.box-list--arguments.box-list--icons
        - model.edge.arguments_pro.first(5).each do |argument|
          li= link_to argument_path(argument.id), remote: true
            h4[class="pro-t tooltip--wider"]
              span.fa.fa-plus
              .list-item.icon-left
                span[title=safe_truncated_text(argument.content)]= argument.title
                - if argument.children_count(:comments) > 0
                  .comments-counter.comments-counter--inline
                    .fa.fa-comment
                    .icon-left= argument.children_count(:comments)
        - if policy(model).create_child?(:arguments)
          li.box-list-item--subtle= link_to new_motion_argument_path(model, pro: 'pro') do
            span= t('arguments.new.pro')
      ul.box-list.box-list--arguments.box-list--icons
        - model.edge.arguments_con.first(5).each do |argument|
          li= link_to argument_path(argument.id), remote: true
            h4[class="con-t tooltip--wider"]
              span.fa.fa-minus
              .list-item.icon-left
                span[title=safe_truncated_text(argument.content)]= argument.title
                - if argument.children_count(:comments) > 0
                  .comments-counter.comments-counter--inline
                    .fa.fa-comment
                    .icon-left= argument.children_count(:comments)
        - if policy(model).create_child?(:arguments)
          li.box-list-item--subtle= link_to new_motion_argument_path(model, pro: 'con') do
            span= t('arguments.new.con')
    - else
      ul.box-list.box-list--arguments
        li.box-list-item--subtle= link_to new_motion_argument_path(model, pro: 'pro') do
          span= t('arguments.new.pro')
      ul.box-list.box-list--arguments
        li.box-list-item--subtle= link_to new_motion_argument_path(model, pro: 'con') do
          span= t('arguments.new.con')
  =yield
  section.unpadded.section--opinion
    - unless local_assigns[:hide_vote_buttons]
      .motion-votes= react_component_store 'SmallVoteContainer', props: motion_vote_props(current_profile, model, user_vote_for(model), buttonsType: 'bottom', r: request.env['PATH_INFO']), **prerender_options

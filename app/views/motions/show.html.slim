- title_with_seo_addon = "#{@motion.title} | #{I18n.t('seo.short_addon')}"
- description_with_seo_addon = "#{markdown_to_plaintext(@motion.content)}  | #{I18n.t('seo.idea_addon', title: @motion.title.downcase)}"
=set_title ()
-content_for :connected_web
  meta[name="description" content=description_with_seo_addon]
  meta[property="og:title" content=title_with_seo_addon]
  meta[property="og:url" content="#{motion_url(@motion)}"]
  meta[property="og:description" content=description_with_seo_addon]
  meta[property="og:image" content="#{@motion.cover_photo.url || image_url('logo-social.png')}"]
  meta[property="twitter:card" content="summary"]
  meta[property="twitter:site" content="@argu_co"]
  meta[property="twitter:title" content=title_with_seo_addon]
  meta[property="twitter:description" content=description_with_seo_addon]
  /meta[property="twitter:creator" content="#{@forum.page.twitter_url}"]
  meta[property="twitter:image" content="#{@motion.cover_photo.url}" ]
div[itemscope="itemscope" itemtype="http://www.schema.org/Answer"]
  .cover-behind
    .cover-image[style="background-image: url('#{@motion.cover_photo.url(:cover)}'); "]
  .col-1
    div[data-intro= t('intro.motion.back')]= to_parent
    =render partial: 'contextualize/context_horizontal', locals: {item: @motion, type: 'motion'}
    .col--motion
      div[data-intro= t('intro.motion.body') itemprop="text"]= render partial: 'body', locals: { motion: @motion }
      =react_component 'CombiBigVote', motion_combi_vote_props(current_profile, @motion, @vote), {prerender: true}
      /=render partial: 'updates/update', locals: {item: @motion}
.col-2
  .intro-filler[data-intro= t('intro.motion.arguments') data-position= "top"]
=render_columns(@arguments, buttons_url: new_forum_argument_path(@motion.forum, motion_id: @motion), collection_model: Argument, buttons_param: :pro, buttons_form_on_empty: false, buttons_options: {data: remote_unless_user})

- if active_for_user?(:groups, current_user) && @group_responses && (@group_responses.keys | ((current_profile && current_profile.groups) || [])).present?
  .col-3
    .intro-filler[data-intro= t('intro.motion.groups') data-position= "top"]
  -@group_responses && @group_responses.each do |k,v|
    - if v[:collection].values.map { |c| c[:collection].length }.reduce(&:+) > 0 || k.include?(current_profile)
      =render_columns(v[:collection], collection_model: GroupResponse, buttons_url: new_motion_group_response_path(@motion, k), show_new_buttons: v[:responses_left] > 0, buttons_param: :side, header_text: header_values(k))
    - else
      .col-1
        header
          h1= k.name
        .box
          section
            p= t('groups.empty', type: k.name.downcase)

// Render four random motions / questions from the same forum

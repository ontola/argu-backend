.box.box-with-btns.argument[id="#{model.id.present? ? 'argument_' + model.id.to_s : ''}" class="side-#{model.pro ? 'pro' : 'con'}"]
  section
    = contextual_link_to argument_path(model) do
      h3[class="#{model.pro ? 'pro-t' : 'con-t'}"]= model.title
    p[class='collapsible']
      ==model.supped_content[0..250] + (model.supped_content[251] ? "..." : "")
    -if model.supped_content[251]
      = contextual_link_to argument_path(model), class: "read-more" do
        span.icon-right = t("read-more")
        span.fa.fa-arrow-right
    /ul.btns-sticky.btns-sticky-top[id="votebtn#{model.id}"]
      li=link_to argument_vote_path(model), :remote => true, method: :post, class: 'btn-subtle' do
        span.icon-right=(model.votes_pro_count >= 1 ? '+' : '') + model.votes_pro_count.to_s
        span.fa.fa-arrow-up
      li=link_to argument_vote_path(model), :remote => true, method: :delete, class: "btn-subtle" do
        span.icon-right= model.votes_con_count.to_s
        span.fa.fa-arrow-down
  -if model.comment_threads.present?
    = link_to argument_path(model) + "#commentstitle" do
      section.top-comment
        p= model.comment_threads.first.body[0..150] + (model.comment_threads.first.body[151] ? "..." : "")
        .comments-counter
          -if Rails.configuration.epics.counters
            span.icon-right= model.comments_count.to_s
          span.fa.fa-comments
.box[id="#{@argument.id.present? ? 'argument_' + @argument.id.to_s : ''}" class="side-#{@argument.pro ? 'pro' : 'con'}"]
  section.section-info[class="#{@argument.pro ? 'pro' : 'con'}-bg"]
    span[class="fa #{@argument.pro ? 'fa-plus' : 'fa-minus'}"]
    span.icon-left= @argument.pro ? t('arguments.form.side.pro') : t('arguments.form.side.con')
  section
    h1[class=(@argument.pro ? 'pro-t' : 'con-t') itemprop="headline"]= @argument.title
    =render partial: 'arguments/shr', locals: {model: @argument}
    .markdown[itemprop="text"]
      = markdown_to_html(@argument.content)
  =render @argument.creator, locals= {resource: @argument} if @argument.creator.present?
  ul.btns-list--subtle.btns-horizontal.btn-sticky.btn-sticky-bottom
    - if active_for_user?(:notifications, current_user)
      =react_component 'ActiveToggle', {url: follows_path(argument_id: @argument.id),
                                        initialState: current_profile.following?(@argument),
                                        label: false,
                                        true_props: {method: 'POST', icon: 'bell'},
                                        false_props: {method: 'DELETE', icon: 'bell-slash'}},
                       {prerender: true}
    - if current_user.present? && policy(@argument).update? || active_for_user?(:notifications, current_user)
      li
        ul= react_component 'HyperDropdown', argument_items(@argument), {prerender: true}
    li
      ul= react_component 'HyperDropdown', share_items(@argument), {prerender: true}

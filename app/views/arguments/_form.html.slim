-@argument ||= resource
=semantic_form_for((@argument.new_record? ? [@forum, @argument] : [@argument]), html: {autocomplete: 'off'}) do |f|
  .box.form-toggle[data-intro= t('intro.argument.toggle')]
    =f.input :pro, as: :toggle_radio, :collection => radio_values_for_pro_con(@argument)
  .box.argument[id="#{@argument.id.present? ? 'argument_' + @argument.id.to_s : ''}" class="side-#{@argument.pro ? 'pro' : 'con'}"]
    section.smallpadded.form-filled
      =f.inputs
        =f.input :title, as: :text, input_html: {size: '2', maxlength: '75', class: 'form-input-title'}, label: false
        =f.input :content, input_html: {class: 'form-input-content', rows: '6'}, label: false
        /p.helpertext= raw t("arguments.form.helper.content")
        - if policy(@argument).trash? && !@argument.new_record?
          =f.input :is_trashed, as: :reverse_boolean
        .row
          .span8
            fieldset.control-group
            =f.hidden_field(:motion_id)
    =f.actions
      .sticky-submit= f.action :submit, as: :button
    - if @argument.new_record?
      =render partial: 'profiles/profile_current'
    - else
      =render partial: @argument.creator, locals: {resource: @argument}
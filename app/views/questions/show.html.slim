=set_title question
=connected_web url: question.context_id,
               name: seolized_title(question),
               description: seolized_description(question),
               image: question.default_cover_photo&.url || image_url('logo-social.png')
=render partial: 'application/cover_behind', locals: {media_object: question.default_cover_photo}
.col-1
  div[data-intro= t('intro.question.back')]= to_parent
  =render partial: 'application/trashed', locals: {resource: question}
  =render partial: 'contextualize/context_horizontal', locals: {item: question, type: 'question'}
  .box[class=status_classes_for(question) data-intro= t('intro.question.body') itemscope="itemscope" itemtype="http://schema.org/Question"]
    section
      h1.question-t[itemprop="headline"]= question.title
    =render partial: 'questions/info_bar', locals: {question: question}
    section
      .markdown[itemprop="text"]
        =markdown_to_html(question.content)
      span.hidden[itemprop="answerCount"]= question.children_count(:motions)
    section.section--attachments
      =react_component_store 'Gallery', props: {files: question.attachments.map { |a| {src: a.url, caption: a.description.presence, thumbnail: a.thumbnail, is_image: a.is_image?} }}
    section.section--footer
      =render question.creator, locals= {resource: question}
      ul.btns-list--subtle.sticky--bottom-right.btns-horizontal.btns-list--grey-background
        - unless current_user.guest?
          li
            ul=react_component_store 'HyperDropdown', props: follow_dropdown_items(question)
        =crud_menu_item(question, question_items(question))
        - if question.edge.is_public?
          li
            ul= react_component_store 'ShareDropdown', props: share_items(question)
  - unless question.is_published?
    =render partial: 'application/publish', locals: {resource: question}
- if question.blog_posts.untrashed.present?
  .col-1
    =render partial: 'happenings/timeline', locals: {resource: question, show_unpublished: policy(question).update?}
- if question.edge.children_with_location?
  .col-1.large-map
    =react_component_store 'MapViewer', props: map_question_props(question)
.col-1
  - if policy(question).create_child?(:motions)
    .intro-filler[data-intro= t('intro.question.motions') data-position= "top"]
    header
      h2= t('motions.call_to_action.title')
    =link_to polymorphic_url([:new, question, :motion])
      .box.box-link
        section
          h3
            span.fa.fa-lightbulb-o
            span.icon-left= t('motions.call_to_action.action', type: motion_type.downcase)
- if @motions.present?
  =render_columns({'' => {collection: @motions}},
                  header: motions_type,
                  header_text: 'test',
                  collection_model: Motion,
                  partial: 'question_answers/show',
                  show_new_buttons: policy(question).create_child?(:motions).present?,
                  buttons_url: polymorphic_url([:new, question, :motion]),
                  buttons_text: t('add_type', type: motion_type),
                  page_param: :page,
                  buttons_icon: 'fa-lightbulb-o',
                  buttons_header: @motions.present? && t('motions.one_up'),
                  buttons_class: 'box-link--motion')

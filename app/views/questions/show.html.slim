=set_title @question.title
-content_for :connected_web
  meta[name="description" content="#{@question.content}"]
  meta[property="og:title" content="#{@question.display_name}"]
  meta[property="og:url" content="#{motion_url(@question)}"]
  meta[property="og:description" content="#{markdown_to_plaintext(@question.content)}"]
  meta[property="og:image" content="#{@question.cover_photo.url}"]
  meta[property="twitter:card" content="summary"]
  meta[property="twitter:title" content="#{@question.display_name}"]
  meta[property="twitter:description" content="#{@question.content}"]
  /meta[property="twitter:creator" content="#{@forum.page.twitter_url}"]
  meta[property="twitter:image" content="#{@question.cover_photo.url}" ]
.cover-behind
  .cover-image[style="background-image: url('#{@question.cover_photo.url}'); "]
.col-1
  div[data-intro= t('intro.question.back')]= to_parent
  =render partial: 'contextualize/context_horizontal', locals: {item: @question, type: 'que'}
  .box[class="#{'trashed' if @question.is_trashed?}" data-intro= t('intro.question.body') itemscope="itemscope" itemtype="http://schema.org/Question"]
    section.section-info.question-bg
      span[class="fa fa-#{question_icon}"]
      span.icon-left= question_type
      =render partial: 'questions/expires_at', locals: {deadline: @question.expires_at}
      =render partial: 'decisions/decision_and_deadline', locals: {deadline: @question.expires_at}
    section
      h1.question-t[itemprop="headline"]= @question.title
      .markdown[itemprop="text"]
        = markdown_to_html(@question.content)
      span.hidden[itemprop="answerCount"]= @question.motions_count
    /- if @question.tags.present?
      =render partial: 'tags/tags', locals: {resource: @question}
    =render @question.creator, locals= {resource: @question}
    ul.btns-list--subtle.btns-sticky.btns-sticky-bottom.btns-horizontal.btns-list--grey-background
      - if active_for_user?(:notifications, current_user)
        li.tooltip[data-title=I18n.t('tooltips.follow')]
          =react_component 'ActiveToggle', {url: follows_path(question_id: @question.id),
                                            initialState: current_profile.following?(@question),
                                            true_props: {method: 'POST', icon: 'bell', label: t('follow')},
                                            false_props: {method: 'DELETE', icon: 'bell-slash', label: t('unfollow')}},
                           {prerender: true}
      - if current_user.present? && policy(@question).update? || active_for_user?(:notifications, current_user)
        li
          ul= react_component 'HyperDropdown', question_items(@question), {prerender: true}
      li
        ul= react_component 'HyperDropdown', share_items(@question), {prerender: true}
.col-1
  .intro-filler[data-intro= t('intro.question.motions') data-position= "top"]
==render_columns({'' => {collection: policy_scope(@motions)}}, collection_model: Motion, buttons_url: url_for([:new, @forum, :motion, question_id: @question.id]), buttons_text: t('add_type', type: motion_type))

.comment[id=c.identifier class=status_classes_for(c) itemscope="itemscope" itemtype="http://schema.org/Comment"]
  section.section--details.section--details--comment
    - if policy(c).update? || policy(c).trash?
      .sticky--top-right.menu-button= dropdown_menu(c, :actions, item_opts: {renderLeft: true})
    .detailsBar
      =render partial: 'profiles/detail_profile', locals: {resource: c} if c.creator.present?
      .detail
        .detail__text
          time[datetime=c.created_at ]= awesome_time_ago_in_words c.created_at
  section
    .markdown[id=c.id itemprop="text"]= c.is_trashed? ? I18n.t('trashed') : markdown_to_html(c.body) || I18n.t('deleted')
      =markdown_to_html(motion.content)
    - if !c.is_trashed? && policy(c.parent_model).create_child?(:comments)
      =link_to resource.iri_path(parent_id: c.id), {data: { comment_id: c.id, turbolinks: 'false' }, class: 'sticky--bottom-right btn-subtle btn--mini btn-reply'} do
        span.fa.fa-reply
        span.icon-left= t('reply')
  =render partial: 'comments/form', locals: { resource: resource, parent_id: c.id, visible: false, comment: Comment.new, modal: local_assigns[:modal] }
  - if c.has_children?
    - c.children.reject { |c| c.abandoned? }.each do |ch|
      =render partial: 'comments/comment', locals: { resource: resource, c: ch, modal: local_assigns[:modal] }
    =link_to t('comments.more'), '/' if c.children.length > 40

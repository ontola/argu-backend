image: ruby:3.0.2

cache:
  paths:
    - vendor/

variables:
  DEVISE_SECRET: secret
  DISABLE_PROMETHEUS: "true"
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2375
  ELASTICSEARCH_URL: "http://localhost:9200"
  JWT_ENCRYPTION_TOKEN: secret
  POSTGRES_PASSWORD: password
  POSTGRES_USER: postgres
  POSTGRESQL_ADDRESS: postgres
  POSTGRESQL_PASSWORD: password
  POSTGRESQL_USERNAME: postgres
  SECRET_KEY_BASE: secret

default:
  before_script:
    - apt-get update -qq && apt-get install -y -qq libvips libvips-dev
    - bundle install --deployment --path vendor/bundle
    - bundle exec rake db:create
    - bundle exec rake db:schema:load
    - bundle exec rake db:test:prepare

build:
  stage: build
  image: docker:18.09.8
  services:
    - docker:18.09.8-dind
    - postgres:12
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE:latest .
    - docker run --network host --env APARTMENT_DISABLE_INIT=true --env DISABLE_PROMETHEUS=true --env POSTGRESQL_ADDRESS --env POSTGRESQL_DATABASE=test --env RAILS_ENV=production  --env REDIS_URL=$REDIS_URL --env SECRET_KEY_BASE=secret --env DEVISE_SECRET=secret $CI_REGISTRY_IMAGE:latest ./bin/rails runner "puts 'succeeded'"
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest

productionTagManual:
  stage: manualTag
  image: docker:18.09.8
  services:
    - docker:18.09.8-dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:production
    - docker push $CI_REGISTRY_IMAGE:production
  when: manual

stagingTagManual:
  stage: manualTag
  image: docker:18.09.8
  services:
    - docker:18.09.8-dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:staging
    - docker push $CI_REGISTRY_IMAGE:staging
  when: manual

codeQuality:
  stage: test
  before_script:
    - gem install brakeman
    - gem install bundle-audit
    - gem install rubocop -v 0.92.0
    - gem install rubocop-rails -v 2.5.2
    - gem install rubocop-rspec -v 1.39.0
  script:
    - brakeman -z
    - rubocop
    - bundle-audit update && bundle-audit check --ignore CVE-2015-9284

spec:
  stage: test
  services:
    - redis:6
    - postgres:12
    - name: docker.elastic.co/elasticsearch/elasticsearch:6.7.2
      alias: elasticsearch
      command: [ "bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node" ]
  script:
    - bundle exec license_finder
    - bundle exec rake spec

test:
  stage: test
  services:
    - redis:6
    - postgres:12
    - name: docker.elastic.co/elasticsearch/elasticsearch:6.7.2
      alias: elasticsearch
      command: [ "bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node" ]
  script:
    - MINITEST_REPORTER=CustomReporter bundle exec rake test

autoTagProduction:
  stage: tag
  image: docker:18.09.8
  services:
    - docker:18.09.8-dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:production
    - docker push $CI_REGISTRY_IMAGE:production
  only:
    - master

autoTagStaging:
  stage: tag
  image: docker:18.09.8
  services:
    - docker:18.09.8-dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:staging
    - docker push $CI_REGISTRY_IMAGE:staging
  only:
    - develop

productionDevProxy:
  stage: devProxy
  before_script:
    - ''
  script:
    - eval $PRODUCTION_PIPELINE_TRIGGER
  when: manual

stagingDevProxy:
  stage: devProxy
  before_script:
    - ''
  script:
    - eval $STAGING_PIPELINE_TRIGGER
  when: manual

stages:
  - build
  - manualTag
  - devProxy
  - test
  - tag

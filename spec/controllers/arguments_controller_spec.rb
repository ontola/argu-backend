require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ArgumentsController do

  describe "as a user" do
    login_user

    describe "GET show" do
      it "assigns the requested argument as @argument" do
        argument = FactoryGirl.create :argument
        get :show, {:id => argument.to_param}
        assigns(:argument).should eq(argument)
      end
    end

    describe "GET new" do
      it "assigns a new argument as @argument" do
        get :new, {}
        assigns(:argument).should be_a_new(Argument)
      end
    end

    describe "GET edit" do
      it "assigns the requested argument as @argument" do
        argument = FactoryGirl.create :argument
        get :edit, {:id => argument.to_param}
        assigns(:argument).should eq(argument)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new Argument" do
          expect {
            motion = FactoryGirl.create :motion
            post :create, {:argument => FactoryGirl.attributes_for(:argument).merge({motion_id: motion.id}) }
          }.to change(Argument, :count).by(1)
        end

        it "assigns a newly created argument as @argument" do
          motion = FactoryGirl.create :motion
          post :create, {:argument => FactoryGirl.attributes_for(:argument).merge({motion_id: motion.id}) }
          assigns(:argument).should be_a(Argument)
          assigns(:argument).should be_persisted
        end

        it "redirects to the created argument" do
          motion = FactoryGirl.create :motion
          post :create, {:argument => FactoryGirl.attributes_for(:argument).merge({motion_id: motion.id}) }
          response.should redirect_to(Argument.last.motion)
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved argument as @argument" do
          # Trigger the behavior that occurs when invalid params are submitted
          Argument.any_instance.stub(:save).and_return(false)
          post :create, {:argument => {}}
          assigns(:argument).should be_a_new(Argument)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          Argument.any_instance.stub(:save).and_return(false)
          post :create, {:argument => {}}
          response.should render_template('form')
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        it "redirects to root" do
          argument = FactoryGirl.create :argument
          put :update, {:id => argument.to_param, :argument => FactoryGirl.attributes_for(:argument) }
          response.should redirect_to(root_path)
        end
      end

      describe "with invalid params" do
        it "redirects to root" do
          argument = FactoryGirl.create :argument
          # Trigger the behavior that occurs when invalid params are submitted
          Argument.any_instance.stub(:save).and_return(false)
          put :update, {:id => argument.to_param, :argument => {}}
          response.should redirect_to(root_path)
        end
      end
    end

    describe "DELETE destroy" do
      it "doesn't destroy the requested argument" do
        argument = FactoryGirl.create :argument
        expect {
          delete :destroy, {:id => argument.to_param}
        }.to change(Argument, :count).by(0)
      end

      it "redirects to root" do
        argument = FactoryGirl.create :argument
        delete :destroy, {:id => argument.to_param}
        response.should redirect_to(root_path)
      end
    end
  end

  describe "as an admin" do
    login_admin

    describe "PUT update" do
      describe "with valid params" do
        it "updates the requested argument" do
          argument = FactoryGirl.create :argument
          # Assuming there are no other arguments in the database, this
          # specifies that the Argument created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          Argument.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
          put :update, {:id => argument.to_param, :argument => {'these' => 'params'}}
        end

        it "assigns the requested argument as @argument" do
          argument = FactoryGirl.create :argument
          put :update, {:id => argument.to_param, :argument => FactoryGirl.attributes_for(:argument)}
          assigns(:argument).should eq(argument)
        end

        it "redirects to the argument" do
          argument = FactoryGirl.create :argument
          put :update, {:id => argument.to_param, :argument => FactoryGirl.attributes_for(:argument)}
          response.should redirect_to(argument)
        end
      end

      describe "with invalid params" do
        it "assigns the argument as @argument" do
          argument = FactoryGirl.create :argument
          # Trigger the behavior that occurs when invalid params are submitted
          Argument.any_instance.stub(:save).and_return(false)
          put :update, {:id => argument.to_param, :argument => {}}
          assigns(:argument).should eq(argument)
        end

        it "re-renders the 'edit' template" do
          argument = FactoryGirl.create :argument
          # Trigger the behavior that occurs when invalid params are submitted
          Argument.any_instance.stub(:save).and_return(false)
          put :update, {:id => argument.to_param, :argument => {}}
          response.should render_template('arguments/form')
        end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested argument" do
        argument = FactoryGirl.create :argument
        expect {
          delete :destroy, {:id => argument.to_param, destroy: true}
        }.to change(Argument, :count).by(-1)
      end

      it "redirects to the motion after destroying" do
        argument = FactoryGirl.create :argument
        delete :destroy, {:id => argument.to_param, destroy: true}
        response.should redirect_to(motion_url(argument.motion))
      end

      it "trashes the requested argument" do
        argument = FactoryGirl.create :argument
        expect {
          delete :destroy, {:id => argument.to_param}
        }.to change { Argument.last.is_trashed }.to(true)
      end

      it "redirects to the arguments list after trashing" do
        argument = FactoryGirl.create :argument
        delete :destroy, {:id => argument.to_param, destroy: false}
        response.should redirect_to(motion_url(argument.motion))
      end
    end
  end
end
